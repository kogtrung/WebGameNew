@model IEnumerable<WebGame.Models.Achievement>
@{
    var game = ViewBag.Game as WebGame.Models.Game;
    var unlocked = ViewBag.Unlocked as List<int> ?? new List<int>();
    bool isAdmin = User.IsInRole("Admin");
    ViewData["Title"] = $"Achievements for {game?.Title}";
}

<div class="container mt-4">
    <h2>Achievements for <span class="text-primary">@game?.Title</span></h2>
    @if (isAdmin)
    {
        <a class="btn btn-success mb-3" href="@Url.Action("Create", new { gameId = game.Id })">Add Achievement</a>
    }
    <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
        @foreach (var a in Model)
        {
            <div class="col">
                <div class="card h-100 @(unlocked.Contains(a.Id) ? "border-success" : "border-secondary")">
                    <div class="card-body d-flex flex-column align-items-center">
                        @if (a.IsSecret && !unlocked.Contains(a.Id))
                        {
                            <img src="/images/achievement-secret.png" alt="Secret Achievement" style="width:64px;height:64px;" class="mb-2" />
                            <h5 class="card-title">Secret Achievement</h5>
                            <p class="card-text text-muted">Complete the game to reveal this achievement</p>
                        }
                        else
                        {
                            <img src="@(string.IsNullOrEmpty(a.IconUrl) ? "/images/achievement-default.png" : a.IconUrl)" alt="@a.Title" style="width:64px;height:64px;" class="mb-2" />
                            <h5 class="card-title">@a.Title</h5>
                            <p class="card-text text-muted">@a.Description</p>
                            <div class="d-flex gap-2 mb-2">
                                <span class="badge bg-warning text-dark">@a.Points pts</span>
                                <span class="badge bg-info">@a.ConditionType: @a.ConditionValue</span>
                            </div>
                        }
                        
                        @if (unlocked.Contains(a.Id))
                        {
                            <span class="badge bg-success">Unlocked</span>
                        }
                        else
                        {
                            <span class="badge bg-secondary">Locked</span>
                        }
                        @if (!isAdmin && User.Identity.IsAuthenticated && !unlocked.Contains(a.Id))
                        {
                            <form asp-action="Unlock" method="post" style="display:inline">
                                @Html.AntiForgeryToken()
                                <input type="hidden" name="achievementId" value="@a.Id" />
                                <button type="submit" class="btn btn-sm btn-outline-success">Unlock</button>
                            </form>
                        }
                        @if (isAdmin)
                        {
                            <div class="mt-2">
                                <a class="btn btn-sm btn-outline-primary" href="@Url.Action("Edit", new { id = a.Id })">Edit</a>
                                <form asp-action="Delete" method="post" style="display:inline" onsubmit="return confirm('Delete this achievement?');">
                                    <input type="hidden" name="id" value="@a.Id" />
                                    <button type="submit" class="btn btn-sm btn-outline-danger">Delete</button>
                                </form>
                            </div>
                        }
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@section Scripts {
    <script>
        // Hàm để kiểm tra và unlock achievements
        async function checkAchievements(gameId, conditionType, value) {
            try {
                const response = await fetch('/api/achievements/check', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify({ gameId, conditionType, value })
                });

                const result = await response.json();
                if (result.success && result.newlyUnlocked.length > 0) {
                    // Hiển thị thông báo unlock achievement
                    result.newlyUnlocked.forEach(achievement => {
                        showAchievementUnlocked(achievement);
                    });
                    // Refresh trang để cập nhật danh sách achievements
                    setTimeout(() => location.reload(), 3000);
                }
            } catch (error) {
                console.error('Error checking achievements:', error);
            }
        }

        // Hàm hiển thị thông báo unlock achievement
        function showAchievementUnlocked(achievement) {
            const toast = document.createElement('div');
            toast.className = 'toast show position-fixed bottom-0 end-0 m-3';
            toast.style.zIndex = '1050';
            toast.innerHTML = `
                <div class="toast-header bg-success text-white">
                    <strong class="me-auto">Achievement Unlocked!</strong>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast"></button>
                </div>
                <div class="toast-body">
                    <h5>${achievement.title}</h5>
                    <p>${achievement.description}</p>
                    <span class="badge bg-warning text-dark">+${achievement.points} pts</span>
                </div>
            `;
            document.body.appendChild(toast);
            setTimeout(() => toast.remove(), 5000);
        }
    </script>
} 